{"version":3,"sources":["App.js","component/Navbar.js","serviceWorker.js","index.js"],"names":["female","Component","duration","background","border","color","male","App","state","feet","inches","weight","BMI","handleChange","e","_this","setState","Object","defineProperty","target","name","value","femaleButton","preventDefault","prevState","maleButton","handleClose","show","handleShow","handleSubmit","weightCalculation","heightCalc","parseInt","YourBMI","Math","pow","toFixed","weightCalc","weightText","values","this","react_default","a","createElement","className","lib","m","s","autoComplete","onSubmit","onClick","style","placeholder","onChange","required","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.165dfb71.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { TextInput, Button, Card, Col, Row, Toast} from \"react-materialize\";\nimport \"./App.css\";\nimport Nav from \"./component/Navbar\";\n\nconst female = {\n  duration: 1,\n  background: \"linear-gradient(to bottom right, rgb(205, 37, 207), rgb(256, 13, 175))\",\n  border: \"solid 2px #2B2D41\",\n  color: \"white\"\n};\n\nconst male = {\n  duration: 1,\n  background:\"linear-gradient(to bottom right, rgb(65, 77, 247), rgb(56, 103, 255))\",\n  border: \"solid 2px #2B2D41\",\n  color: \"white\"\n};\n\nclass App extends Component {\n  state = {\n    female: false,\n    male: false,\n    feet: 0,\n    inches: 0,\n    weight: 0,\n    BMI: 0\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  femaleButton = e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      female: !prevState.female,\n      male: false\n    }));\n  };\n\n  maleButton = e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      male: !prevState.male,\n      female: false\n    }));\n  };\n\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n\n  handleShow = () => {\n    this.setState({ show: true });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const state = this.state\n    const weightCalculation = state.weight * 0.45;\n    const feetPlusInchesCalc = state.feet * 12 + parseInt(state.inches)\n    const heightCalc = feetPlusInchesCalc * 0.025;\n    const squarerootOfHeight = heightCalc ** 2;\n    const YourBMI = weightCalculation / squarerootOfHeight;\n\n    this.setState({\n      BMI: YourBMI.toFixed(2)\n    });\n  };\n\n  render() {\n    let weightCalc;\n    let weightText;\n    const values = this.state;\n  \n    if (values.BMI > 0) {\n      weightCalc = <div>{values.BMI}</div>;\n    } else {\n      weightCalc = <div />;\n    }\n\n    if (values.BMI < 18.5 && values.BMI > 0) {\n      weightText = <p className=\"bmi-text underweight\">UnderWeight</p>;\n    } else if (values.BMI > 18.5 && values.BMI < 24.99) {\n      weightText = <p className=\"bmi-text normal\">Normal</p>;\n    } else if (values.BMI > 25 && values.BMI < 29.9) {\n      weightText = <p className=\"bmi-text overweight\">Overweight</p>;\n    } else if (values.BMI > 30) {\n      weightText = <p className=\"bmi-text obese\">Obese</p>;\n    }\n\n    return (\n      <div className=\"container-App\">\n        <div className=\"App\">\n          <h1 className=\"title-of-app\">Body Mass Index</h1>\n\n          <Col m={12} s={12}>\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n              <Card>\n                <div className=\"sex-orientation\"> \n                {values.female === true ? (\n                <div\n                      onClick={this.femaleButton}\n                      style={female}\n                      className=\"sex female\">\n                      <i className=\"fas fa-female\" />\n                    </div> ) : (\n                    <div onClick={this.femaleButton} className=\"sex female\">\n                      <i className=\"fas fa-female\" />\n                    </div>\n                  )}\n\n                  {values.male === true ? (\n                    <div\n                      onClick={this.maleButton}\n                      style={male}\n                      className=\"sex male\">\n                      <i className=\"fas fa-male\" />\n                    </div>\n                  ) : (\n                    <div onClick={this.maleButton} className=\"sex male\">\n                      <i className=\"fas fa-male\" />\n                    </div>\n                  )}\n                </div>\n                <TextInput\n                  className=\"input\"\n                  placeholder=\"Weight:\"\n                  name=\"weight\"\n                  onChange={this.handleChange}\n                  required\n                />\n                <Row>\n                <TextInput\n                  className=\"input-feet\"\n                  placeholder=\"Feet\"\n                  name=\"feet\"\n                  onChange={this.handleChange}\n                  required\n                />\n                 <TextInput\n                  className=\"input-inches\"\n                  placeholder=\"Inches\"\n                  name=\"inches\"\n                  onChange={this.handleChange}\n                  required\n                />\n                </Row>\n\n                <div />\n\n                <Button type=\"submit\">Calculate BMI</Button>\n                <div className=\"weight-container\">\n                  <h3 className=\"weightCalc\">{weightCalc}</h3>\n                  {weightText}\n                </div>\n              </Card>\n            </form>\n          </Col>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Navbar, Button, Modal } from \"react-materialize\";\n\nclass Nav extends Component {\n  openModal = () => {\n    console.log(\"clicked\");\n  };\n  render() {\n    return (\n      <div>\n        <Navbar className=\"blue-grey darken-4\" alignLinks=\"left\">\n      \n          <Modal header=\"\" trigger={<Button >Chart</Button>}>\n            <img style={{width:530}} src=\"https://www.top10better.com/wp-content/uploads/2018/10/Body_mass_calculator-kg.jpg\" alt=\"body mass\"></img>\n          </Modal>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Nav;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}